name: Build Pipeline (Improved)

on:
  workflow_dispatch:
    inputs:
      build_args:
        description: "Arguments passed to the build script"
        required: false
        default: "--make --force"
        type: string
      working_directory:
        description: "Working directory from where the build command is run"
        required: false
        default: "."
        type: string
      use_cache:
        description: "Enable caching for dependencies"
        required: false
        default: true
        type: boolean
      docker_platforms:
        description: "Docker platforms to build for"
        required: false
        default: "linux/amd64,linux/arm64"
        type: string

  push:
    branches:
      - main
      - develop
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.github/dependabot.yml'

  pull_request:
    branches:
      - main
      - develop
    paths-ignore:
      - '*.md'
      - 'docs/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# Allow only one concurrent deployment per branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

jobs:
  # Pre-flight checks
  preflight:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      changed-files: ${{ steps.changes.outputs.any }}
      docker-changed: ${{ steps.changes.outputs.docker }}
      python-changed: ${{ steps.changes.outputs.python }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            any:
              - '**'
            docker:
              - 'Dockerfile*'
              - '.github/actions/build-environment/**'
              - 'resources/**'
            python:
              - '**/*.py'
              - 'requirements*.txt'
              - 'pyproject.toml'
              - 'setup.py'

  # Code quality and security checks
  quality-checks:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: preflight
    if: needs.preflight.outputs.changed-files == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Cache pre-commit hooks
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run pre-commit hooks
        run: pre-commit run --all-files --show-diff-on-failure

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('bandit-report.json') != ''
        with:
          sarif_file: bandit-report.json

  # Build and test
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [preflight, quality-checks]
    strategy:
      fail-fast: false
      matrix:
        flavor: [minimal, full]
        include:
          - flavor: minimal
            dockerfile: Dockerfile.improved
            target: system-tools
          - flavor: full
            dockerfile: Dockerfile.improved
            target: final

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        if: ${{ inputs.use_cache || github.event_name != 'workflow_dispatch' }}
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.flavor }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.flavor }}-
            ${{ runner.os }}-buildx-

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
          flavor: |
            suffix=-${{ matrix.flavor }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          target: ${{ matrix.target }}
          platforms: ${{ inputs.docker_platforms || 'linux/amd64' }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            WORKSPACE_FLAVOR=${{ matrix.flavor }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

      - name: Test Docker image
        run: |
          docker run --rm \
            --entrypoint="" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ fromJSON(steps.meta.outputs.json).tags[0] }} \
            python --version

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # Integration tests
  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: build-and-test
    if: github.event_name != 'pull_request'
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run integration tests
        run: |
          # Add your integration test commands here
          echo "Running integration tests..."
          # Example: docker-compose -f docker-compose.test.yml up --abort-on-container-exit

  # Deployment
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build-and-test, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://your-app-url.com
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # Add your deployment commands here

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    if: always()
    needs: [preflight, quality-checks, build-and-test, integration-tests]
    steps:
      - name: Cleanup old packages
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ env.IMAGE_NAME }}
          package-type: container
          min-versions-to-keep: 10
          delete-only-untagged-versions: true
