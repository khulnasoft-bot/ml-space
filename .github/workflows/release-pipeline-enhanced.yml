name: Enhanced Release Pipeline

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version of this release (e.g., 1.0.0)"
        required: true
  milestone:
    types: [closed]

env:
  BRANCH_PREFIX: "release/v"
  PYTHON_VERSION: '3.10'
  DOCKER_BUILDKIT: 1

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Set version from milestone
        if: github.event.milestone != null && github.event.milestone.title != null
        run: |
          VERSION=$(sed "s/^v//" <<<"${{ github.event.milestone.title }}")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "PR_MILESTONE_LINK=-M ${{ github.event.milestone.title }}" >> $GITHUB_ENV
          
      - name: Set version from input
        if: github.event.inputs != null && github.event.inputs.version != null
        run: echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV

      - name: Validate version
        run: |
          if [[ ! "${{ env.VERSION }}" =~ ^([0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+)?)$ ]]; then
            echo "Error: Invalid version format: ${{ env.VERSION }}"
            echo "Expected format: MAJOR.MINOR.PATCH[-PRERELEASE][+BUILD]"
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Container Registry
        if: secrets.CONTAINER_REGISTRY_PASSWORD != ''
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY_URL }}
          username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          npm ci

      - name: Apply configurations
        run: |
          ./resources/scripts/system/apply-config.sh
          ./resources/scripts/maintenance/fix-permissions.sh

      - name: Run tests
        run: |
          make test
          make integration-test

      - name: Build and push Docker image
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          # Build and push the Docker image
          make docker-build
          make docker-push

      - name: Create GitHub release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ contains(env.VERSION, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update documentation
        run: |
          # Update version in docs
          make docs
          # Push updated docs
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add docs/
          git commit -m "docs: update for v${{ env.VERSION }}" || echo "No docs changes to commit"
          git push origin HEAD:$GITHUB_REF_NAME || echo "No docs changes to push"

      - name: Clean up
        if: always()
        run: |
          # Clean up temporary files and caches
          ./resources/scripts/maintenance/clean-layer.sh --all
          docker system prune -af --volumes
